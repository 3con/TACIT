package edu.usc.cssl.tacit.topicmodel.onlinelda.services;
import java.util.Arrays;
import org.apache.commons.math3.special.Gamma;
import org.apache.commons.math3.distribution.GammaDistribution;

public class OnlineLDAUtils {

    //For a vector theta ~ Dir(array), computes E[log(theta)] given array.
	
	public static LinearArray dirichletExpectation(double[] array) {
		int cols = array.length;
		double sum=0;
        for(double d: array){
            sum += d;
        }
        double d = Gamma.digamma(sum);
        double[] result = new double[cols];
        for(int i=0; i<cols; i++){
            result[i] = Gamma.digamma(array[i]) - d;
        }
        return new LinearArray(result);
    }
	
	
	//TODO: Verification Done
	public static Matrix dirichletExpectation(double[][] array){	
		int rows = array.length;
		int cols = array[0].length;
		double[] rowDigamma = new double[rows];
		double[][] result = new double[rows][]; 
		
		Arrays.fill(rowDigamma,0.0);
		
		for(int i=0; i<rows; i++){
			for(int j=0; j<cols; j++){
				rowDigamma[i] += array[i][j];
			}
			rowDigamma[i] = Gamma.digamma(rowDigamma[i]);
		}
		for(int i=0; i<rows; i++){
			result[i] = new double[cols];
			for(int j=0; j<cols; j++){
				double d = Gamma.digamma(array[i][j]);
                result[i][j] = d - rowDigamma[i];
			}
		}
		return new Matrix(result);
	}
	
	public static LinearArray exp(double[] array) {
        int cols = array.length;
        double[] result = new double[cols];       
        for (int i=0; i<cols; i++) {
            result[i] = Math.exp(array[i]);
        }
        return new LinearArray(result);
    }
	
	public static Matrix exp(double[][] array) {
        int rows = array.length;
        int cols = array[0].length;
        double[][] result = new double[rows][];        
        for (int i=0; i<rows; i++) {
        	result[i] = new double[cols];
            for (int j=0; j<cols; j++) {
                result[i][j] = Math.exp(array[i][j]);
            }
        }
        return new Matrix(result);
    }
	
	public static double gammaLn(double d){
        return Gamma.logGamma(d);
    }
	
	public static LinearArray gammaLn(double[] array){
        int cols = array.length;
        double[] result = new double[cols];
        for (int i=0; i<cols; i++) {
        	result[i] = Gamma.logGamma(array[i]);
        }
        return new LinearArray(result);
	}
	
	public static Matrix gammaLn(double[][] array){
		int rows = array.length;
        int cols = array[0].length;
        double[][] result = new double[rows][];
        for (int i=0; i<rows; i++) {
        	result[i] = new double[cols];
            for (int j=0; j<cols; j++) {
                result[i][j] = Gamma.logGamma(array[i][j]);
            }
        }
        return new Matrix(result);
	}
	
	static GammaSampling gd = new GammaSampling();
	
	public static Matrix gammaSample(int rows, int cols){
        double[][] result = gd.samples(rows,cols) ;
        return new Matrix(result);
    }
}

class GammaSampling {
	public static double[][] mtx = {{ 1.07163768,  1.19228883,  1.01514137,  0.96773221,  0.90901765,  0.9455451,
	                                  1.10005699,  0.93833431,  1.1165235,   0.98396498,  0.94027872,  1.01112468,
	                                  0.89608393,  1.00084543,  0.98189573,  1.16239293,  0.84788705,  1.01509312,
	                                  1.03422295,  0.96495224,  1.000996,    0.82029942,  1.2617311,   1.04310107,
	                                  0.90646129,  0.92374505, 1.14601402,  1.19662361,  1.08762919,  1.00770757,
	                                  0.9713794,   1.02855428,  1.0980569,   0.79815532,  0.936727,    0.9848322,
	                                  1.02849064,  1.05285855,  0.91625816,  0.9683874 },
									{ 1.01237889,  1.15793805,  0.96478044,  1.0712078,   0.91131221,  1.01371441,
	                                  0.94874006,  0.81868485,  1.04621848,  1.10243968,  1.02271346,  0.96985032,
	                                  0.89952364,  0.95234341,  1.06435919,  1.15610287,  0.99400245,  0.90359291,
	                                  1.18919748,  1.11043582,  1.15230675,  1.02934302,  0.89165281,  0.92248492,
	                                  1.1902257,   1.17330081,  0.79006631,  1.09849262,  1.00895333,  1.05483797,
	                                  0.96158615,  1.07569605,  1.02632614,  1.00037097,  0.99066684,  1.14759028,
	                                  0.97672889, 1.17169308,  1.14108127,  0.89901057},
									{ 0.95830844,  1.0021795,   0.8389639,   0.85339784,  1.0075944,   1.11766789,
	                                  1.04918056,  0.8685441,  1.15174353,  0.96672443, 1.26449461,  0.8436868,
	                                  0.96958982,  0.96235531,  1.02483679,  1.03889217,  1.08565321,  1.12081892,
	                                  1.0554942,   0.86726728,  1.15879568,  0.81174754,  1.00491657,  0.97389769,
	                                  1.10393447,  0.91064044,  0.8511482,   0.98399779,  1.10930459,  0.9667576,
	                                  1.12221358,  0.92762628,  0.96681134,  1.14378928,  0.82071464,  0.94740118,
	                                  1.01650099,  0.93789689,  0.96762195,  0.99998964},
									{ 1.08493132,  0.91801376,  0.92962161,  1.00562924,  0.94387206,  0.92007392,
	                                  0.97799698,  0.89462335,  0.92629707,  0.93571036,  0.94046047,  1.1704819,
	                                  0.98795495,  1.08515713,  1.04479444,  0.89577668,  0.92422972,  0.98119595,
	                                  1.21853869,  0.89024994,  1.12487214,  0.98554874,  0.95889469,  0.84166476,
	                                  1.16891966,  0.95247141,  1.07577391,  0.83240994,  1.07309419,  1.06427416,
	                                  1.08084166,  1.03211032,  0.92930908,  0.86116282,  0.95250519,  0.89052983,
	                                  0.999807,    0.97459422,  0.95303861,  0.90465866},
									{ 0.88453213,  0.99990682,  0.93871676,  0.85475593,  1.03764029,  0.97575133,
	                                  1.02108488,  1.10363414,  0.87571143,  0.98622683,  1.17393498, 0.93164042,
	                                  1.02938916,  1.12480688,  0.89066092,  0.89136739,  0.8054429,  1.01405515,
	                                  1.10853573,  0.95707617,  1.17659879,  1.03286018,  1.04573375,  0.91811599,
	                                  0.98191069,  0.97886277,  0.89106515,  0.95393463,  0.97796564,  0.89534061,
	                                  0.86281844,  1.01651954,  0.85249449,  0.86150086,  1.08888668,  0.9524956,
	                                  1.02476364,  0.96799355,  0.91029195,  1.14679998},
									{ 0.95596359,  0.91582467,  0.93774542,  0.99723936,  1.10481638,  0.98250216,
	                                  0.99640643,  0.92626916,  0.91040779,  0.97637627,  0.98694534,  0.95406998,
	                                  0.9779845,   1.09448506,  1.04917825,  0.94501205,  1.05380594,  0.89269185,
	                                  1.01220771,  0.97505026,  0.99442394,  1.03299071,  0.99938615,  0.91635876,
	                                  1.02099067,  1.06930259,  1.09629615,  0.94249761,  0.93731181,  1.20058351,
	                                  1.15633881,  0.88394654,  0.95313164,  1.07351958,  1.12566587,  0.94294684,
	                                  0.88027217,  1.04958789,  1.16878874,  0.9439614 },
									{ 0.87446927,  0.99835275,  0.9081974,   1.10348278,  0.88358017,  0.95077054,
	                                  1.04070164,  1.0971741,   1.09640533,  0.92077855,  1.00272837,  1.03888786,
	                                  0.94219404,  1.09146657,  0.98603309,  0.96436764,  0.91554569,  1.02462108,
	                                  0.93278045,  0.92644174,  0.99202138,  1.10125557,  0.94338958,  1.03760548,
	                                  0.91757297,  1.18798109,  1.04330368,  0.8764342,   0.92038152,  1.07786468,
	                                  0.94933888,  1.17070846,  0.9864571,  0.79889135,  1.13738886,  1.16943089,
	                                  0.93806363,  0.89623316,  1.16422743,  1.03505629},
									{ 1.04555957,  1.20506677,  1.06207369,  1.02697616,  1.10833569,  0.88234003,
	                                  1.0241589,  1.17207712,  1.0898255,   1.10156437,  0.92808312,  1.03619803,
	                                  0.94894283,  0.95990895,  0.96962277,  0.95116191,  0.98758315,  0.87961786,
	                                  1.10276335,  1.02992169,  0.94446954,  0.78774574,  1.02310497,  0.84933795,
	                                  0.97006737,  1.13782149,  0.84361753,  1.01598582,  1.12625425,  0.9890633,
	                                  0.91767149,  0.89016506,  1.18876904,  0.90687799,  0.97978935,  0.76720122,
	                                  0.96012054,  0.99285485,  1.10184863,  1.00057337},
									{ 0.97544587,  0.82972253,  1.18266226,  0.995577,    1.07266554,  1.15084534,
	                                  0.88428041,  0.99279971,  1.17788654,  1.05867062,  0.91746071,  1.05395978,
	                                  0.87985764,  1.01675202,  1.13908847,  0.97818893,  1.00139376,  1.04657933,
	                                  0.9644006,   1.0207045,   0.98207527,  0.8678856,   0.96874968,  1.01896829,
	                                  1.14278251,  0.85678019,  1.00332908,  0.97596229,  0.94472953,  0.75795569,
	                                  0.94882153,  1.07652557,  1.08213118,  1.04540817,  1.07463,     0.93139839,
	                                  0.89174947,  1.26684426,  0.93190477,  0.93648053},
									{ 0.94749881,  0.95375314,  1.08394133,  0.90572615,  0.98311303,  1.08550616,
	                                  1.05927169,  0.99570679,  0.92646595,  0.95982067,  0.81960158,  0.96773638,
	                                  1.058774,    1.04613469,  1.26806063,  1.04554294,  1.03241536,  0.85876231,
	                                  0.90738057,  0.8774088,  0.90371854,  0.92349585,  0.95065084,  1.03452271,
	                                  0.94667224,  1.00031408,  0.90016903,  0.94252871,  1.13507444,  0.94996462,
	                                  1.05022541,  1.16996472,  1.13387844,  1.03124112,  0.83706433,  0.99959897,
	                                  0.8668706,   0.99175437,  1.06694991,  1.23691552}};	
	

	
	GammaDistribution gd;
	
	public GammaSampling(){
		this.gd = new GammaDistribution(100.0,0.01);
		this.gd.reseedRandomGenerator(100000001L);
	}
	
	public double[][] samples(int rows, int cols){
		
		double[][] result = new double [rows][cols];
		for(int i=0; i<rows; i++){
			for(int j=0; j<cols; j++){
				result[i][j] = gd.sample();
			}
		}
		return result;
	}
}

